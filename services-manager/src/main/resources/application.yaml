# Copyright 2020 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

spring:
  application:
    name: services-manager
  output:
    ansi:
      enabled: always
  main:
    allow-bean-definition-overriding: true

# Options at the command line include:
# --run : Run all known services
# --logging : Alter the logging level for all known services
# --config : Print out the loaded configuration (for debugging the manager)
manager:
  # Search up path hierarchy for the root directory by name
  # This allows the services-manager to be less dependant on where it is located and where it was run from
  root: Palisade-services

  # Available modes: servicesRunner, servicesShutdown, loggingBouncer, [default if empty] configChecker
  mode: servicesRunner

  # Configuration for what happens during a "services-manager --run"
  # List<Map<taskName: String, services: List<ServiceName>>>
  tasks: []
    ###
    # Example tasks list for running "my-setup" first, followed by both "my-service" and "my-other-service" in parallel
    # The services-manager moves on to the next task once all services for the current task are either running healthily (/actuator/health) or exited with code 0
    # Once no tasks are remaining, the manager exits with code 0  --  if a task errors, the manager exits with that code
    # nb. all listed tasks must of course be configured under manager.services
    #
    # - setup:
    #   - my-setup
    # - run-services:
    #   - my-service
    #   - my-other-service
    ###

  # Map<ServiceName, ServiceConfiguration>
  services: {}
    ###
    # Example configuration for a service "my-service", starting a my-service.jar with a runtime-loaded /data/types.jar
    # Where appropriate, each entry is formatted as "TAG: [EXAMPLE-VALUE] :: IMPLEMENTATION-DETAIL - DESCRIPTION"
    #
    # my-service:                                               :: "spring.application.name=${my-service}" - tag for the service being managed, should match with the service's web.client key (the value will then be resolved later, see eureka vs static)
    #   jar: my-service.jar                                     :: "java -jar ${jar}" - executable jar file with main entry point
    #   paths:                                                  :: Additional (external) libraries to dynamically load at runtime (e.g. example library)
    #     - "/data/types.jar"                                   :: "java -Dloader.path=${paths[0]},${paths[1]}"
    #   profiles:                                               :: Spring Boot profiles to enable, comma-separated list
    #     - default                                             :: "java -Dspring.profiles.active=${profiles[0]},${profiles[1]}"
    #   log: my-service.log                                     :: "java [args] > ${log}" - logging output filepath, singleton filepath
    #   err: my-service.err                                     :: "java [args] 2> ${err}" - error output filepath, singleton filepath
    #   level:                                                  :: "java -Dlogging.level.${level.key}=${level.value}" - same format as spring's standard logging changes, classpath-loglevel map
    #     my.service.MainApplication: "INFO"                    :: ALSO http POST address /actuator/loggers/${key}, body "configuredLevel=${value}" - classpath to change and logging level to change to
    ###

eureka:
  client:
    enabled: false

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic
    default-config: default
