<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2018-2021 Crown Copyright
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>service</artifactId>
        <groupId>uk.gov.gchq.palisade</groupId>
        <version>0.5.1-${revision}</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <developers>
        <developer>
            <name>PalisadeDevelopers</name>
            <organization>GCHQ</organization>
            <organizationUrl>https://github.com/gchq</organizationUrl>
        </developer>
    </developers>

    <scm>
        <url>${scm.url}</url>
        <connection>${scm.connection}</connection>
        <developerConnection>${scm.developer.connection}</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <!--  *********** Artifact ID ***********    -->
    <artifactId>create-kafka-queues</artifactId>
    <url>https://github.com/gchq/Palisade-services/tree/develop/create-kafka-queues</url>
    <name>GCHQ Palisade - Create Kafka Queues</name>
    <description>
        A simple container to create some topics on kafka on helm install.
    </description>
    <!--  *********** Artifact ID ***********    -->

    <properties>
        <!-- Dockerfile-maven-plugin configurable base image - openjdk:11.0-jre-slim -->
        <dockerfile.base.image>openjdk@sha256:775cd07d9c8c44db4a329269b128065dd86549675ea4db70b6201f3081eb2d89</dockerfile.base.image>
        <!-- Prefix image tag with image type being used -->
        <dockerfile.base.tag>jre</dockerfile.base.tag>

        <dockerfile.kafka.version>2.2.1</dockerfile.kafka.version>
        <dockerfile.scala.version>2.12</dockerfile.scala.version>
        <dockerfile.kafka.tgz_url>https://archive.apache.org/dist/kafka/${dockerfile.kafka.version}/kafka_${dockerfile.scala.version}-${dockerfile.kafka.version}.tgz</dockerfile.kafka.tgz_url>
    </properties>

    <profiles>
        <profile>
            <id>pi</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <copy file="${project.build.outputDirectory}/values.yaml"
                                              toFile="../charts/${project.artifactId}/values.yaml" overwrite="true"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Use a JRE image, openjdk:11-jre-slim linux/amd64, mirrors base config -->
            <id>jrei</id>
            <properties>
                <dockerfile.base.image>openjdk@sha256:775cd07d9c8c44db4a329269b128065dd86549675ea4db70b6201f3081eb2d89</dockerfile.base.image>
                <dockerfile.base.tag>jre</dockerfile.base.tag>
            </properties>
        </profile>
        <profile>
            <!-- Use a JDK image, openjdk:11-jdk-slim linux/amd64 -->
            <id>jdki</id>
            <properties>
                <dockerfile.base.image>openjdk@sha256:1ee84ab87de99d6edf3592acde24ec909ec9814a8fb24db76a510ddb643b470c</dockerfile.base.image>
                <dockerfile.base.tag>jdk</dockerfile.base.tag>
            </properties>
        </profile>
    </profiles>

    <build>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/values.yaml</include>
                </includes>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/values.yaml</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dateFormat>yyyyMMdd-HHmmss</dateFormat>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <!-- somehow necessary. otherwise the variables are not available in the pom -->
                    <generateGitPropertiesFile>false</generateGitPropertiesFile>
                    <useNativeGit>true</useNativeGit>
                </configuration>
            </plugin>
            <plugin>
                <groupId>it.ozimov</groupId>
                <artifactId>yaml-properties-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/../charts/${project.artifactId}/values.yaml</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.10</version>
                <executions>
                    <execution>
                        <phase>post-integration-test</phase>
                        <id>cache</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>deploy</phase>
                        <id>ar</id>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <repository>${image.repository}${project.artifactId}</repository>
                    <dockerfile>Dockerfile</dockerfile>
                    <tag>${dockerfile.base.tag}-${dockerfile.version.tag}</tag>
                    <finalName>${project.artifactId}</finalName>
                    <buildArgs>
                        <BASE_IMG>${dockerfile.base.image}</BASE_IMG>
                        <KAFKA_TGZ_URL>${dockerfile.kafka.tgz_url}</KAFKA_TGZ_URL>
                    </buildArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.1.0</version>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>ossrh</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>