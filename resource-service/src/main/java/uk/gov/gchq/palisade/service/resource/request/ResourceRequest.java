package uk.gov.gchq.palisade.service.resource.request;

import org.springframework.util.Assert;
import uk.gov.gchq.palisade.Generated;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * Contains the information for a request where the User has been identified in the system.
 * This will only be created if the user does exists.
 * Note there are two class that represents the same data where each has a different purpose.
 * uk.gov.gchq.palisade.service.user.response.UserResponse is the output of the User Service
 * uk.gov.gchq.palisade.service.resource.request.ResourceRequest is the input of the Resource Service
 * Generated by the UserService and sent to the ResourceService
 */
public final class ResourceRequest {

    private final String token; // Unique identifier for this specific request end-to-end
    private final String userJson;  //JSon string for the User object
    private final String resourceId;  //Resource that that is being asked to access
    private final String contextJson;  // represents the context information as a Json string of a Map<String, String>

    private ResourceRequest(String token, String userJson, String resourceId, String contextJson) {
        this.token = token;
        this.userJson = userJson;
        this.resourceId = resourceId;
        this.contextJson = contextJson;
    }

    @Generated
    public String getToken() {
        return token;
    }

    @Generated
    public String getUserJson() {
        return userJson;
    }

    @Generated
    public String getResourceId() {
        return resourceId;
    }

    @Generated
    public String getContextJson() {
        return contextJson;
    }


    @Override
    @Generated
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof ResourceRequest)) {
            return false;
        }
        ResourceRequest that = (ResourceRequest) o;
        return token.equals(that.token) &&
                userJson.equals(that.userJson) &&
                resourceId.equals(that.resourceId) &&
                contextJson.equals(that.contextJson);
    }

    @Override
    @Generated
    public int hashCode() {
        return Objects.hash(token, userJson, resourceId, contextJson);
    }

    @Override
    @Generated
    public String toString() {
        return new StringJoiner(", ", ResourceRequest.class.getSimpleName() + "[", "]")
                .add("token='" + token + "'")
                .add("userJson='" + userJson + "'")
                .add("resourceId='" + resourceId + "'")
                .add("contextJson='" + contextJson + "'")
                .add(super.toString())
                .toString();
    }

    /**
     * Builder class for the creation of instances of the UserResponse.  The variant of the Builder Pattern is
     * meant to be used by first populating the Builder class and then us this to create the UserRequest class.
     */
    public static class Builder {
        private String token;
        private String userJson;
        private String resourceId;
        private String contextJson;


        public Builder() {
        }

        public ResourceRequest.Builder token(String token) {
            this.token = token;
            return this;
        }

        public ResourceRequest.Builder userJson(String userJson) {
            this.userJson = userJson;
            return this;
        }

        public ResourceRequest.Builder resourceId(String resourceId) {
            this.resourceId = resourceId;
            return this;
        }

        public ResourceRequest.Builder context(String contextJson) {
            this.contextJson = contextJson;
            return this;
        }

        public ResourceRequest create(ResourceRequest.Builder builder) {
            Assert.notNull(builder.token, "Token Id cannot be null");
            Assert.notNull(builder.userJson, "User cannot be null");
            Assert.notNull(builder.resourceId, "Resource Id cannot be null");
            Assert.notNull(builder.contextJson, "Context  cannot be null");
            return new ResourceRequest(builder.token, builder.userJson, builder.resourceId, builder.contextJson);
        }
    }


}

