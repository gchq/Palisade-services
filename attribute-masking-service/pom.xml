<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2018-2021 Crown Copyright
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>service</artifactId>
        <groupId>uk.gov.gchq.palisade</groupId>
        <version>0.5.1-${revision}</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <developers>
        <developer>
            <name>PalisadeDevelopers</name>
            <organization>GCHQ</organization>
            <organizationUrl>https://github.com/gchq</organizationUrl>
        </developer>
    </developers>

    <!--  *********** Artifact ID ***********    -->
    <artifactId>attribute-masking-service</artifactId>
    <url>https://github.com/gchq/Palisade-services/tree/develop/attribute-masking-service</url>
    <name>GCHQ Palisade - Attribute-Masking Service</name>
    <description>
        The Attribute-Masking Service will persist authorised requests for later use by the Data Service and modify the request that is sent, via Kafka, to the Topic-Offset Service and Filtered-Resource Service.
    </description>
    <!--  *********** Artifact ID ***********    -->

    <scm>
        <url>${scm.url}</url>
        <connection>${scm.connection}</connection>
        <developerConnection>${scm.developer.connection}</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Dependency versions -->
        <scala.version>2.13</scala.version>
        <akka.version>2.6.10</akka.version>
        <alpakka.kafka.version>2.1.0-M1</alpakka.kafka.version>

        <!-- Test dependency versions -->
        <testcontainers.version>1.15.3</testcontainers.version>
        <!-- Testcontainers images -->
        <testcontainers.kafka.image>confluentinc/cp-kafka:5.5.1</testcontainers.kafka.image>
        <testcontainers.redis.image>redis:6-alpine</testcontainers.redis.image>

        <!-- Dockerfile-maven-plugin configurable base image - openjdk:11.0-jre-slim -->
        <dockerfile.base.image>openjdk@sha256:775cd07d9c8c44db4a329269b128065dd86549675ea4db70b6201f3081eb2d89</dockerfile.base.image>
        <!-- Prefix image tag with image type being used -->
        <dockerfile.base.tag>jre</dockerfile.base.tag>
        <!-- Set the version-tag depending on profile (defaults to SNAPSHOT-$githash, but may be RELEASE-$version for releases) -->
        <!--suppress UnresolvedMavenProperty -->
        <dockerfile.version.tag>${revision}-${git.commit.id.abbrev}</dockerfile.version.tag>
    </properties>

    <dependencies>
        <!--
        ~ Palisade
        -->
        <dependency>
            <!-- Common types (User, Resource, Context) -->
            <groupId>uk.gov.gchq.palisade</groupId>
            <artifactId>common</artifactId>
            <version>0.5.1-${common.revision}</version>
        </dependency>
        <!--
        ~ Akka and Alpakka (Kafka)
        -->
        <dependency>
            <!-- Core Akka streaming (more up-to-date than alpakka dependency) -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <!-- Alpakka Kafka connectors -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-kafka_${scala.version}</artifactId>
            <version>${alpakka.kafka.version}</version>
        </dependency>
        <dependency>
            <!-- Akka/SLF4j logging connector -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-slf4j_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <!-- Smarter discovery of Kafka servers -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-discovery_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <!--
        ~ Spring Boot
        -->
        <dependency>
            <!-- Health endpoint (and loggers, shutdown, metrics ...) -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <!-- Rest controller -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <!-- Caching/Persistence stores -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <!-- H2 implementation of CrudRepositories -->
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <!-- Redis implementation of CrudRepositories -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!--
        ~ Test Dependencies
        -->
        <dependency>
            <!-- JUnit, Jupiter, SpringBootTest etc... -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Kafka contract testing -->
            <groupId>org.testcontainers</groupId>
            <artifactId>kafka</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Akka testing -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-testkit_${scala.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Akka Kafka testing -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-kafka-testkit_${scala.version}</artifactId>
            <version>${alpakka.kafka.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>pi</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <copy file="${project.build.outputDirectory}/values.yaml"
                                              toFile="../charts/${project.artifactId}/values.yaml" overwrite="true"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Use a JRE image, openjdk:11-jre-slim linux/amd64, mirrors base config -->
            <id>jrei</id>
            <properties>
                <dockerfile.base.image>openjdk@sha256:775cd07d9c8c44db4a329269b128065dd86549675ea4db70b6201f3081eb2d89</dockerfile.base.image>
                <dockerfile.base.tag>jre</dockerfile.base.tag>
            </properties>
        </profile>
        <profile>
            <!-- Use a JDK image, openjdk:11-jdk-slim linux/amd64 -->
            <id>jdki</id>
            <properties>
                <dockerfile.base.image>openjdk@sha256:1ee84ab87de99d6edf3592acde24ec909ec9814a8fb24db76a510ddb643b470c</dockerfile.base.image>
                <dockerfile.base.tag>jdk</dockerfile.base.tag>
            </properties>
        </profile>
    </profiles>

    <build>
        <resources>
            <resource>
                <!-- Substitute maven properties in values.yaml -->
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/values.yaml</include>
                </includes>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/values.yaml</exclude>
                </excludes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <!-- Substitute maven properties in tests yaml -->
                <filtering>true</filtering>
                <directory>src/*-tests/resources</directory>
                <includes>
                    <include>**/*.yaml</include>
                </includes>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dateFormat>yyyyMMdd-HHmmss</dateFormat>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <generateGitPropertiesFile>false
                    </generateGitPropertiesFile><!-- somehow necessary. otherwise the variables are not available in the pom -->
                    <useNativeGit>true</useNativeGit>
                </configuration>
            </plugin>
            <plugin>
                <groupId>it.ozimov</groupId>
                <artifactId>yaml-properties-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/../charts/${project.artifactId}/values.yaml</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>1.5.3</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <file>${basedir}/target/classes/banner.txt</file>
                    <replacements>
                        <replacement>
                            <token>image.tag</token>
                            <!--suppress UnresolvedMavenProperty -->
                            <value>${version}-${git.commit.id.abbrev}</value>
                        </replacement>
                    </replacements>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <configuration>
                            <classifier>exec</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.10</version>
                <executions>
                    <execution>
                        <phase>post-integration-test</phase>
                        <id>cache</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>deploy</phase>
                        <id>ar</id>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <repository>${image.repository}${project.artifactId}</repository>
                    <dockerfile>Dockerfile</dockerfile>
                    <!--suppress UnresolvedMavenProperty -->
                    <tag>${dockerfile.base.tag}-${dockerfile.version.tag}</tag>
                    <finalName>${project.artifactId}</finalName>
                    <buildArgs>
                        <BASE_IMG>${dockerfile.base.image}</BASE_IMG>
                        <JAR_FILE>target/${project.build.finalName}-exec.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.1.0</version>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>ossrh</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>add-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/unit-tests/java</source>
                                <source>src/component-tests/java</source>
                                <source>src/contract-tests/java</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-resources</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <filtering>true</filtering>
                                    <directory>src/unit-tests/resources</directory>
                                    <directory>src/component-tests/resources</directory>
                                    <directory>src/contract-tests/resources</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
